{"version":3,"sources":["components/Buttons/Button.module.css","components/ButtonPanel/ButtonPanel.module.css","components/Input/Input.module.css","Layout/Layout.module.css","components/Buttons/Button.js","components/ButtonPanel/ButtonPanel.js","components/Input/Input.js","hoc/Auxilliary.js","Logic/operation.js","Logic/calculate.js","Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","button","props","btnClass","classes","Button","orange","wide","className","onClick","clicked","name","buttonPanel","ButtonPanel","click","input","Input","type","readOnly","value","aux","children","operate","num1","num2","opr","num11","Big","num22","plus","toString","minus","times","alert","div","calculate","obj","btnName","next","nextNum","operation","total","test","Operate","result","includes","parseFloat","Layout","state","isNumber","item","clickHandler","setState","Calculate","dis","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.de8f75b1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3cKeW\",\"orange\":\"Button_orange__2gQLw\",\"wide\":\"Button_wide__2FXAg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ButtonPanel\":\"ButtonPanel_ButtonPanel__3rLZa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__36z3h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dis\":\"Layout_dis__1aIFe\"};","import React from 'react';\r\nimport classes from './Button.module.css';\r\nconst button = props => {\r\n    let btnClass = classes.Button + ' '+ (props.orange? classes.orange: '') + (props.wide? classes.wide: '');\r\nreturn(\r\n    <div className={btnClass}>\r\n        <button onClick= {()=>props.clicked(props.name)}>{props.name}</button>\r\n    </div>\r\n);\r\n}\r\n\r\nexport default button;","import React from 'react';\r\nimport Button from '../Buttons/Button';\r\nimport classes from './ButtonPanel.module.css';\r\n\r\nconst buttonPanel = props => {\r\n    return (\r\n      <div className={classes.ButtonPanel}>\r\n        <div>\r\n          <Button name=\"AC\" clicked={props.click}/>\r\n          <Button name=\"+/-\" clicked={props.click}  />\r\n          <Button name=\"%\" clicked={props.click} />\r\n          <Button name=\"/\" clicked={props.click} orange />\r\n        </div>\r\n        <div>\r\n          <Button name=\"7\" clicked={props.click} />\r\n          <Button name=\"8\" clicked={props.click} />\r\n          <Button name=\"9\" clicked={props.click} />\r\n          <Button name=\"X\" clicked={props.click} orange />\r\n        </div>\r\n        <div>\r\n          <Button name=\"4\" clicked={props.click} />\r\n          <Button name=\"5\" clicked={props.click} />\r\n          <Button name=\"6\" clicked={props.click} />\r\n          <Button name=\"-\" clicked={props.click} orange />\r\n        </div>\r\n        <div>\r\n          <Button name=\"1\" clicked={props.click} />\r\n          <Button name=\"2\" clicked={props.click} />\r\n          <Button name=\"3\"clicked={props.click}  />\r\n          <Button name=\"+\" clicked={props.click} orange />\r\n        </div>\r\n        <div>\r\n          <Button name=\"0\" clicked={props.click} wide />\r\n          <Button name=\".\" clicked={props.click} />\r\n          <Button name=\"=\" clicked={props.click} orange />\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default buttonPanel;","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = props => (\r\n    <input className={classes.Input} type='text'  readOnly value = {props.value}/>\r\n)\r\n\r\nexport default input;","import React from 'react';\r\n\r\nconst aux = props => {\r\n   return <div>{props.children}</div>\r\n}\r\n\r\n\r\nexport default aux;","import Big from 'big.js';\r\n\r\nconst operate = (num1, num2, opr) =>{\r\n\r\n    let num11 = Big(num1);\r\n    let num22= Big(num2);\r\n\r\n    if(opr === '+'){\r\n        return num11.plus(num22).toString();\r\n    }\r\n    if (opr === '-') {\r\n        return num11.minus(num22).toString();\r\n    }\r\n    if (opr === \"X\") {\r\n      return num11.times(num22).toString();\r\n    }\r\n    if (opr === \"/\") {\r\n      if(num22 === 0){\r\n        alert('Dividing by 0.');\r\n        return '0';\r\n      }\r\n      return num11.div(num22).toString();\r\n    }\r\n}\r\n\r\nexport default operate;","import Operate from '../Logic/operation';\r\nimport Big from 'big.js';\r\n\r\n const isNumber = (item) => {\r\n  return /[0-9]+/.test(item);\r\n};\r\n\r\nconst calculate = (obj, btnName) => {\r\n    let next = obj.nextNum;\r\n\r\n    if(btnName === 'AC'){\r\n        return {\r\n            nextNum : null,\r\n            operation: null,\r\n            total: null\r\n        }\r\n    }\r\n    if(isNumber(btnName)){\r\n        if(obj.nextNum){\r\n            return {\r\n                nextNum: next + btnName\r\n            }\r\n        }\r\n\r\n        return {\r\n            nextNum: btnName\r\n        }\r\n    }\r\n\r\n    if(btnName === '='){\r\n        if (obj.operation && obj.nextNum) {\r\n          const result = Operate(obj.total, obj.nextNum, obj.operation);\r\n          return {\r\n            total: result,\r\n            nextNum: null,\r\n          };\r\n        } else {\r\n          return {};\r\n        }\r\n    }\r\n\r\n    if(btnName === '%'){\r\n        if(obj.nextNum && obj.operation){\r\n            const result = Operate(obj.total, obj.nextNum, obj.operation);\r\n            return {\r\n                total: Big(result).div(Big(100)).toString(),\r\n                nextNum: null,\r\n                operation: null\r\n            }\r\n        }\r\n        if(obj.nextNum) {\r\n            return{\r\n                nextNum: Big(obj.nextNum).div(Big(100)).toString()\r\n            }\r\n        }\r\n        return{};\r\n    }\r\n\r\n    if(btnName === '.'){\r\n        if(obj.nextNum){\r\n            if(obj.nextNum.includes('.')){\r\n                return{};\r\n            }\r\n            return{\r\n                nextNum: obj.nextNum + '.'\r\n            }\r\n        }\r\n        return{\r\n            nextNum: '0.'\r\n        }\r\n    }\r\n\r\n    if(btnName === '+/-'){\r\n        if(obj.nextNum){\r\n            return {\r\n              nextNum: (-1 * parseFloat(obj.nextNum)).toString(),\r\n            };\r\n        }\r\n        if (obj.total) {\r\n          return {\r\n              total: -1 * (parseFloat(obj.total)).toString()\r\n          }\r\n        }\r\n        return{};\r\n    }\r\n\r\n    if(obj.operation && obj.nextNum){\r\n        const result = Operate(obj.total,obj.nextNum, btnName);\r\n        return{\r\n            total: result,\r\n            nextNum: null,\r\n            operation: btnName\r\n        }\r\n    }\r\n    if(!obj.nextNum && obj.operation){\r\n        return{\r\n            operation: btnName\r\n        }\r\n    }\r\n\r\n    return{\r\n        total: next,\r\n        operation: btnName,\r\n        nextNum: null\r\n    }\r\n}\r\n\r\nexport default calculate;","import React, { Component } from 'react';\r\nimport ButtonPanel from '../components/ButtonPanel/ButtonPanel';\r\nimport Input from '../components/Input/Input';\r\nimport Aux from '../hoc/Auxilliary';\r\nimport Calculate from '../Logic/calculate';\r\nimport classes from './Layout.module.css';\r\n\r\nclass Layout extends Component {\r\n    state = {\r\n        total: null,\r\n        nextNum: null,\r\n        operation: null\r\n    }\r\n\r\n    isNumber = (item) =>{\r\n        return /[0-9]+/.test(item);\r\n    }\r\n\r\n    clickHandler = btnName => {\r\n        this.setState(Calculate(this.state, btnName));\r\n    }\r\n\r\n    render(){\r\n        return (\r\n          <Aux>\r\n              <div className = {classes.dis}>{this.state.operation}</div>\r\n            <Input value = {this.state.nextNum || this.state.total || '0'} />\r\n            <ButtonPanel click={this.clickHandler}/>\r\n          </Aux>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Layout;","import React from 'react';\n\nimport Layout from './Layout/Layout';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}